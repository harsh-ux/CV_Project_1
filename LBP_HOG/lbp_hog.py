# -*- coding: utf-8 -*-
"""LBP_HOG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YtDBn5l-AnQeilWBCW3ma4D2lDNVKq5e
"""

from sklearn.datasets import fetch_lfw_people
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.model_selection import train_test_split
from skimage.feature import local_binary_pattern, hog
from skimage.color import rgb2gray
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler
lfw_dataset = fetch_lfw_people(min_faces_per_person=70, resize=0.4)

X = lfw_dataset.images.astype('float32')
X_gray = np.zeros((X.shape[0], X.shape[1], X.shape[2]))
for i in range(X.shape[0]):
    X_gray = X
X_lbp = np.zeros((X.shape[0], X.shape[1], X.shape[2]))
for i in range(X.shape[0]):
    X_lbp[i,:,:] = local_binary_pattern(X_gray[i,:,:], 8, 1, method='uniform')
X_hog = np.zeros((X.shape[0], 540))
for i in range(X.shape[0]):
    X_hog[i,:] = hog(X_gray[i,:,:], orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm='L2-Hys')

X_train_lbp, X_test_lbp, y_train, y_test = train_test_split(X_lbp.reshape(X_lbp.shape[0], -1), lfw_dataset.target, test_size=0.2, random_state=42)
svm_lbp = make_pipeline(StandardScaler(), SVC(kernel='rbf', class_weight='balanced', C=10, gamma=0.001))
svm_lbp.fit(X_train_lbp, y_train)
y_pred_lbp = svm_lbp.predict(X_test_lbp)
accuracy_lbp = accuracy_score(y_test, y_pred_lbp)
precision_lbp = precision_score(y_test, y_pred_lbp, average='weighted')
recall_lbp = recall_score(y_test, y_pred_lbp, average='weighted')
print('LBP Features SVM:')
print('Accuracy:', accuracy_lbp)
print('Precision:', precision_lbp)
print('Recall:', recall_lbp)

X_train_hog, X_test_hog, y_train, y_test = train_test_split(X_hog, lfw_dataset.target, test_size=0.2, random_state=42)
svm_hog = make_pipeline(StandardScaler(), SVC(kernel='rbf', class_weight='balanced', C=10, gamma=0.001))
svm_hog.fit(X_train_hog, y_train)
y_pred_hog = svm_hog.predict(X_test_hog)
accuracy_hog = accuracy_score(y_test, y_pred_hog)
precision_hog = precision_score(y_test, y_pred_hog, average='weighted')
recall_hog = recall_score(y_test, y_pred_hog, average='weighted')
print('HOG Features:')
print('Accuracy:', accuracy_hog)
print('Precision:', precision_hog)
print('Recall:', recall_hog)

rf_hog = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
rf_hog.fit(X_train_hog, y_train)
y_pred_hog_rf = rf_hog.predict(X_test_hog)
accuracy_hog_rf = accuracy_score(y_test, y_pred_hog_rf)
precision_hog_rf = precision_score(y_test, y_pred_hog_rf, average='weighted')
recall_hog_rf = recall_score(y_test, y_pred_hog_rf, average='weighted')

print('Random Forest classifier with HOG features:')
print('Accuracy:', accuracy_hog_rf)
print('Precision:', precision_hog_rf)
print('Recall:', recall_hog_rf)

X_train_lbp, X_test_lbp, y_train, y_test = train_test_split(X_lbp.reshape(X_lbp.shape[0], -1), lfw_dataset.target, test_size=0.2, random_state=42)

rf_lbp = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
rf_lbp.fit(X_train_lbp, y_train)

y_pred_lbp_rf = rf_lbp.predict(X_test_lbp)
accuracy_lbp_rf = accuracy_score(y_test, y_pred_lbp_rf)
precision_lbp_rf = precision_score(y_test, y_pred_lbp_rf, average='weighted')
recall_lbp_rf = recall_score(y_test, y_pred_lbp_rf, average='weighted')

print('LBP Features using Random Forest Classifier:')
print('Accuracy:', accuracy_lbp_rf)
print('Precision:', precision_lbp_rf)
print('Recall:', recall_lbp_rf)

gb_hog = GradientBoostingClassifier(n_estimators=100, random_state=42)
gb_hog.fit(X_train_hog, y_train)
y_pred_hog_gb = gb_hog.predict(X_test_hog)
accuracy_hog_gb = accuracy_score(y_test, y_pred_hog_gb)
precision_hog_gb = precision_score(y_test, y_pred_hog_gb, average='weighted')
recall_hog_gb = recall_score(y_test, y_pred_hog_gb, average='weighted')

print('Gradient Boosting classifier with HOG features:')
print('Accuracy:', accuracy_hog_gb)
print('Precision:', precision_hog_gb)
print('Recall:', recall_hog_gb)

X_train_lbp, X_test_lbp, y_train, y_test = train_test_split(X_lbp.reshape(X_lbp.shape[0], -1), lfw_dataset.target, test_size=0.2, random_state=42)

gb_lbp = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
gb_lbp.fit(X_train_lbp, y_train)

y_pred_lbp_gb = gb_lbp.predict(X_test_lbp)

accuracy_lbp_gb = accuracy_score(y_test, y_pred_lbp_gb)
precision_lbp_gb = precision_score(y_test, y_pred_lbp_gb, average='weighted')
recall_lbp_gb = recall_score(y_test, y_pred_lbp_gb, average='weighted')

print('LBP Features using Gradient Boosting Classifier:')
print('Accuracy:', accuracy_lbp_gb)
print('Precision:', precision_lbp_gb)
print('Recall:', recall_lbp_gb)

"""Visualization"""

import numpy as np
import matplotlib.pyplot as plt
from skimage.feature import local_binary_pattern
from skimage.color import rgb2gray
from skimage.feature import hog
from sklearn.decomposition import PCA
from sklearn.datasets import fetch_lfw_people
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier

lfw_dataset = fetch_lfw_people(min_faces_per_person=70, resize=0.4)

X_test = lfw_dataset.images[-lfw_dataset.target.shape[0]:]
y_test = lfw_dataset.target[-lfw_dataset.target.shape[0]:]

X_test_gray = np.zeros((X_test.shape[0], X_test.shape[1], X_test.shape[2]))
for i in range(X_test.shape[0]):
    X_test_gray = X_test

X_test_lbp = np.zeros((X_test.shape[0], X_test.shape[1], X_test.shape[2]))
for i in range(X_test.shape[0]):
    X_test_lbp[i,:,:] = local_binary_pattern(X_test_gray[i,:,:], 8, 1, method='uniform')

X_test_hog = np.zeros((X_test.shape[0], 540))
for i in range(X_test.shape[0]):
    X_test_hog[i,:] = hog(X_test_gray[i,:,:], orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm='L2-Hys')

X = lfw_dataset.images.astype('float32')
y = lfw_dataset.target
X_gray = np.zeros((X.shape[0], X.shape[1], X.shape[2]))
for i in range(X.shape[0]):
    X_gray = X
X_lbp = np.zeros((X.shape[0], X.shape[1], X.shape[2]))
for i in range(X.shape[0]):
    X_lbp[i,:,:] = local_binary_pattern(X_gray[i,:,:], 8, 1, method='uniform')
X_hog = np.zeros((X.shape[0], 540))
for i in range(X.shape[0]):
    X_hog[i,:] = hog(X_gray[i,:,:], orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm='L2-Hys')

pca = PCA(n_components=100)
X_pca = pca.fit_transform(X_hog)
X_test_pca = pca.transform(X_test_hog)

svm_lbp = SVC(kernel='linear', C=0.1)
svm_lbp.fit(X_lbp.reshape(X_lbp.shape[0], -1), y)
y_pred_lbp_svm = svm_lbp.predict(X_test_lbp.reshape(X_test_lbp.shape[0], -1))

rf_lbp = RandomForestClassifier(n_estimators=100)
rf_lbp.fit(X_lbp.reshape(X_lbp.shape[0], -1), y)
y_pred_lbp_rf = rf_lbp.predict(X_test_lbp.reshape(X_test_lbp.shape[0], -1))

gbc_lbp = GradientBoostingClassifier(n_estimators=100)
gbc_lbp.fit(X_lbp.reshape(X_lbp.shape[0], -1), y)
y_pred_lbp_gbc = gbc_lbp.predict(X_lbp.reshape(X_lbp.shape[0], -1))

from sklearn import svm

svm_hog = svm.SVC()
svm_hog.fit(X_hog, y)
y_pred_hog_svm = svm_hog.predict(X_hog)

svm_lbp = svm.SVC()
svm_lbp.fit(X_lbp.reshape(X_lbp.shape[0], -1), y)
y_pred_lbp_svm = svm_lbp.predict(X_lbp.reshape(X_lbp.shape[0], -1))

rf_hog = RandomForestClassifier(n_estimators=100)
rf_hog.fit(X_hog, y)
y_pred_hog_rf = rf_hog.predict(X_hog)

rf_lbp = RandomForestClassifier(n_estimators=100)
rf_lbp.fit(X_lbp.reshape(X_lbp.shape[0], -1), y)
y_pred_lbp_rf = rf_lbp.predict(X_lbp.reshape(X_lbp.shape[0], -1))

fig, ax = plt.subplots(nrows=2, ncols=5, figsize=(12, 6))
for i in range(10):
    row = i // 5
    col = i % 5
    ax[row][col].imshow(lfw_dataset.images[i], cmap=plt.cm.gray)
    ax[row][col].set_title(f"True: {lfw_dataset.target_names[lfw_dataset.target[i]]}\nHOG_SVM: {lfw_dataset.target_names[y_pred_hog_svm[i]]}\nHOG_RF: {lfw_dataset.target_names[y_pred_hog_rf[i]]}\nLBP_SVM: {lfw_dataset.target_names[y_pred_lbp_svm[i]]}")
    ax[row][col].axis('off')
plt.tight_layout()
plt.show()

"""#minicelebA Dataset

"""

import tarfile
import numpy as np
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.model_selection import train_test_split
from skimage.feature import local_binary_pattern, hog
from skimage.color import rgb2gray
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import StandardScaler

file_path = '/content/minicelebA.tar.gz'

with tarfile.open(file_path, 'r:gz') as tar:
    tar.extractall()

X = np.load('minicelebA.npy')
y = np.load('minicelebA_labels.npy')

X_gray = rgb2gray(X)

X_lbp = np.zeros((X.shape[0], X.shape[1], X.shape[2]))
for i in range(X.shape[0]):
    X_lbp[i,:,:] = local_binary_pattern(X_gray[i,:,:], 8, 1, method='uniform')

X_hog = np.zeros((X.shape[0], 540))
for i in range(X.shape[0]):
    X_hog[i,:] = hog(X_gray[i,:,:], orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm='L2-Hys')

X_train_lbp, X_test_lbp, y_train, y_test = train_test_split(X_lbp.reshape(X_lbp.shape[0], -1), y, test_size=0.2, random_state=42)

svm_lbp = make_pipeline(StandardScaler(), SVC(kernel='rbf', class_weight='balanced', C=10, gamma=0.001))
svm_lbp.fit(X_train_lbp, y_train)
y_pred_lbp = svm_lbp.predict(X_test_lbp)
accuracy_lbp = accuracy_score(y_test, y_pred_lbp)
precision_lbp = precision_score(y_test, y_pred_lbp, average='weighted')
recall_lbp = recall_score(y_test, y_pred_lbp, average='weighted')
print('LBP Features SVM:')
print('Accuracy:', accuracy_lbp)
print('Precision:', precision_lbp)
print('Recall:', recall_lbp)

X_train_hog, X_test_hog, y_train, y_test = train_test_split(X_hog, y, test_size=0.2, random_state=42)

svm_hog = make_pipeline(StandardScaler(), SVC(kernel='rbf', class_weight='balanced', C=10, gamma=0.001))
svm_hog.fit(X_train_hog, y_train)
y_pred_hog = svm_hog.predict(X_test_hog)
accuracy_hog = accuracy_score(y_test, y_pred_hog)
precision_hog = precision_score(y_test, y_pred_hog, average='weighted')
recall_hog = recall_score(y_test, y_pred_hog, average='weighted')
print('HOG Features SVM:')
print('Accuracy:', accuracy_hog)
print('Precision:', precision_hog)
print('Recall:', recall_hog)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
hog = cv2.HOGDescriptor((64,64), (16,16), (8,8), (8,8), 9)
X_train_hog = np.array([hog.compute(img) for img in X_train])
X_test_hog = np.array([hog.compute(img) for img in X_test])

rf_hog = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
rf_hog.fit(X_train_hog, y_train)
y_pred_hog_rf = rf_hog.predict(X_test_hog)
accuracy_hog_rf = accuracy_score(y_test, y_pred_hog_rf)
precision_hog_rf = precision_score(y_test, y_pred_hog_rf, average='weighted')
recall_hog_rf = recall_score(y_test, y_pred_hog_rf, average='weighted')
print('Random Forest classifier with HOG features:')
print('Accuracy:', accuracy_hog_rf)
print('Precision:', precision_hog_rf)
print('Recall:', recall_hog_rf)

lbp_radius = 3
lbp_points = lbp_radius * 8
X_lbp = np.array([cv2.equalizeHist(cv2.LBP(img, lbp_points, lbp_radius, method=cv2.LBP_UNIFORM)) for img in X])
X_train_lbp, X_test_lbp, y_train, y_test = train_test_split(X_lbp.reshape(X_lbp.shape[0], -1), y, test_size=0.2, random_state=42)

rf_lbp = RandomForestClassifier(n_estimators=100, class_weight='balanced', random_state=42)
rf_lbp.fit(X_train_lbp, y_train)
y_pred_lbp_rf = rf_lbp.predict(X_test_lbp)
accuracy_lbp_rf = accuracy_score(y_test, y_pred_lbp_rf)
precision_lbp_rf = precision_score(y_test, y_pred_lbp_rf, average='weighted')
recall_lbp_rf = recall_score(y_test, y_pred_lbp_rf, average='weighted')
print('LBP Features using Random Forest Classifier:')
print('Accuracy:', accuracy_lbp_rf)
print('Precision:', precision_lbp_rf)
print('Recall:', recall_lbp_rf)

gb_hog = GradientBoostingClassifier(n_estimators=100, random_state=42)
gb_hog.fit(X_train_hog, y_train)
y_pred_hog_gb = gb_hog.predict(X_test_hog)
accuracy_hog_gb = accuracy_score(y_test, y_pred_hog_gb)
precision_hog_gb = precision_score(y_test, y_pred_hog_gb, average='weighted')
recall_hog_gb = recall_score(y_test, y_pred_hog_gb, average='weighted')
print('Gradient Boosting classifier with HOG features:')
print('Accuracy:', accuracy_hog_gb)
print('Precision:', precision_hog_gb)
print('Recall:', recall_hog_gb)

X_train_lbp, X_test_lbp, y_train, y_test = train_test_split(X_lbp.reshape(X_lbp.shape[0], -1), lfw_dataset.target, test_size=0.2, random_state=42)

gb_lbp = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
gb_lbp.fit(X_train_lbp, y_train)

y_pred_lbp_gb = gb_lbp.predict(X_test_lbp)

accuracy_lbp_gb = accuracy_score(y_test, y_pred_lbp_gb)
precision_lbp_gb = precision_score(y_test, y_pred_lbp_gb, average='weighted')
recall_lbp_gb = recall_score(y_test, y_pred_lbp_gb, average='weighted')

print('LBP Features using Gradient Boosting Classifier:')
print('Accuracy:', accuracy_lbp_gb)
print('Precision:', precision_lbp_gb)
print('Recall:', recall_lbp_gb)

"""# Custom Dataset"""

import zipfile
import os

with zipfile.ZipFile('/content/images.zip', 'r') as zip_ref:
    zip_ref.extractall('images')

for i in range(50):
    folder_name = f'folder_{i+1}'
    os.makedirs(folder_name)
    for j in range(2):
        file_name = f'image_{j+1}.jpg'
        os.rename(f'images/{folder_name}/{file_name}', f'{folder_name}/{file_name}')

import numpy as np
import matplotlib.pyplot as plt
from skimage.feature import local_binary_pattern
from skimage.color import rgb2gray
from skimage.feature import hog
from sklearn.decomposition import PCA
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
import os

X = []
y = []
for i in range(50):
    folder_name = f'folder_{i+1}'
    for j in range(2):
        file_name = f'image_{j+1}.jpg'
        img = plt.imread(f'{folder_name}/{file_name}')
        X.append(img)
        y.append(i)

X = np.array(X)
y = np.array(y)
X_gray = rgb2gray(X)

X_lbp = np.zeros((X.shape[0], X.shape[1], X.shape[2]))
for i in range(X.shape[0]):
    X_lbp[i,:,:] = local_binary_pattern(X_gray[i,:,:], 8, 1, method='uniform')

X_hog = np.zeros((X.shape[0], 540))
for i in range(X.shape[0]):
    X_hog[i,:] = hog(X_gray[i,:,:], orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm='L2-Hys')

pca = PCA(n_components=100)
X_pca = pca.fit_transform(X_hog)

X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)

svm_lbp = SVC(kernel='linear', C=0.1)
svm_lbp.fit(X_lbp.reshape(X_lbp.shape[0], -1), y)

rf_lbp = RandomForestClassifier(n_estimators=100)
rf_lbp.fit(X_lbp.reshape(X_lbp.shape[0], -1), y)

gbc_lbp = GradientBoostingClassifier(n_estimators=100)
gbc_lbp.fit(X_lbp.reshape(X_lbp.shape[0], -1), y)

image_paths = []
import zipfile
with zipfile.ZipFile(zip_path, 'r') as zip_ref:
  zip_ref.extractall('dataset')

subfolders = [f'dataset/subfolder_{i}' for i in range(50)]

for subfolder in subfolders:
  for i in range(2):
    image_path = f'{subfolder}/image_{i+1}.jpg'
    image_paths.append(image_path)

X = []
for image_path in image_paths:
  image = plt.imread(image_path)
  image_gray = rgb2gray(image)
  image_lbp = local_binary_pattern(image_gray, 8, 1, method='uniform')
  image_hog = hog(image_gray, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(2, 2), block_norm='L2-Hys')
  features = np.concatenate((image_lbp.reshape(-1), image_hog))
  X.append(features)

X = np.array(X)

y = [i//2 for i in range(len(image_paths))]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

svm_lbp = SVC(kernel='linear', C=0.1)
svm_lbp.fit(X_train[:, :X.shape[1]//2], y_train)

y_pred_lbp = svm_lbp.predict(X_test[:, :X.shape[1]//2])
accuracy_lbp = np.mean(y_pred_lbp == y_test)
print(f'Accuracy (LBP): {accuracy_lbp}')

svm_hog = SVC(kernel='linear', C=0.1)
svm_hog.fit(X_train[:, X.shape[1]//2:], y_train)

y_pred_hog = svm_hog.predict(X_test[:, X.shape[1]//2:])
accuracy_hog = np.mean(y_pred_hog == y_test)
print(f'Accuracy (HOG): {accuracy_hog}')

fig, ax = plt.subplots(nrows=2, ncols=5, figsize=(12, 6))
for i in range(10):
    row = i // 5
    col = i % 5
    ax[row][col].imshow(lfw_dataset.images[i], cmap=plt.cm.gray)
    ax[row][col].set_title(f"True: {Custom.target_names[lfw_dataset.target[i]]}\nHOG_SVM: {Custom.target_names[y_pred_hog_svm[i]]}\nHOG_RF: {Custom.target_names[y_pred_hog_rf[i]]}\nLBP_SVM: {Custom.target_names[y_pred_lbp_svm[i]]}")
    ax[row][col].axis('off')
plt.tight_layout()
plt.show()
fig, ax = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))
ax[0][0].imshow(X_test[0], cmap=plt.cm.gray)
ax[0][0].set_title('Original')
ax[0][0].axis('off')
ax[0][1].imshow(X_test_gray[0], cmap=plt.cm.gray)
ax[0][1].set_title('Grayscale')
ax[0][1].axis('off')
ax[1][0].imshow(X_test_lbp[0], cmap=plt.cm.gray)
ax[1][0].set_title('LBP')
ax[1][0].axis('off')
ax[1][1].imshow(hog.visualize(X_test_hog[0], feature_vector=True), cmap=plt.cm.gray)
ax[1][1].set_title('HOG')
ax[1][1].axis('off')
plt.tight_layout()
plt.show()
plt.figure(figsize=(8, 8))
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=y)
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Visualization of HOG Features')
plt.show()
plt.figure(figsize=(8, 8))
plt.scatter(X_lbp[:, 0], X_lbp[:, 1], c=y)
plt.xlabel('Local Binary Pattern Feature 1')
plt.ylabel('Local Binary Pattern Feature 2')
plt.title('2D Visualization of LBP Features')
plt.show()
plt.figure(figsize=(8, 8))
plt.scatter(X_hog[:, 0], X_hog[:, 1], c=y)
plt.xlabel('HOG Feature 1')
plt.ylabel('HOG Feature 2')
plt.title('2D Visualization of HOG Features')
plt.show()